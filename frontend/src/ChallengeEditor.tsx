import { python } from '@codemirror/lang-python';
import { indentUnit } from '@codemirror/language';
import { oneDark } from '@codemirror/theme-one-dark';
import CodeMirror from '@uiw/react-codemirror';
import {
  BookOpen,
  Bug,
  CheckCircle,
  ChevronRight,
  Code2,
  PlayCircle,
  Terminal,
  ThumbsUp,
  XCircle
} from 'lucide-react';
import { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { HintModal } from './components/HintModal';
import RetireConfirmationModal from './components/modals/RetireConfirmationModal';
import RetireModal from './components/modals/RetireModal';
import SuccessModal from './components/modals/SuccessModal';
import VideoModal from './components/modals/VideoModal';
import { useCodeExecution, useCodeGeneration } from './hooks/useCodeGeneration';
import { useHints } from './hooks/useHints';
import { challengeService } from './services/challengeService';
import { Challenge } from './types/challenge';

function ChallengeEditor() {
  const navigate = useNavigate();
  const { themeId } = useParams();
  const [challenge, setChallenge] = useState<Challenge | null>(null);
  const [loading, setLoading] = useState(true);
  const [code, setCode] = useState(`def main(numbers):
    # Write your solution here
    pass
    `);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showVideoModal, setShowVideoModal] = useState(false);  
  const [currentVideo, setCurrentVideo] = useState('');
  const [currentStep, setCurrentStep] = useState(1);
  const [showRetireModal, setShowRetireModal] = useState(false);
  const [showRetireConfirmationModal, setShowRetireConfirmationModal] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  
  // Custom hooks
  const {
    isGenerating,
    generationError,
    explanation,
    aiGeneratedCode,
    lastFailingCode,
    setLastFailingCode,
    handleGenerateCode,
  } = useCodeGeneration();

  const {
    isRunning,
    testResults,
    handleRunCode,
    getPassingTestsCount,
  } = useCodeExecution();

  const {
    // State
    isHintOpen,
    isLoadingHints,
    hintError,
    isFinalHintConfirmVisible,
    setIsFinalHintConfirmVisible,
    visibleHintLevel,
    isHintContentVisible,
    setIsHintContentVisible,
    
    // Computed values
    sortedHintLevels,
    highestHintLevel,
    displayedHintLevelCount,
    normalizedUnlockedLevel,
    unlockedHintLevels,
    activeHint,
    nextHintLevel,
    activeHintTitle,
    hintButtonLabel,
    
    // Refs
    hintDialogRef,
    hintHeadingRef,
    prevFocusedElementRef,
    finalHintConfirmButtonRef,
    
    // Actions
    closeHint,
    handleHintButtonClick,
    handleResetHints,
    handleRequestAdditionalHint,
    handleConfirmFinalHint,
    handleCancelFinalHint,
    setVisibleHintLevel,
  } = useHints(challenge, code, testResults);

  useEffect(() => {
    const loadChallengeData = async () => {
      if (!themeId) {
        navigate('/');
        return;
      }

      try {
        setLoading(true);
        setHasAutoGenerated(false); // 新しい課題を読み込むときにフラグをリセット
        const challengeData = await challengeService.getChallengeById(themeId);
        setChallenge(challengeData);
      } catch (error) {
        console.error('Failed to load challenge:', error);
        navigate('/');
      } finally {
        setLoading(false);
      }
    };

    loadChallengeData();
  }, [themeId, navigate]);

  // 課題データが読み込まれたら自動的にコード生成を実行
  useEffect(() => {
    if (challenge && !loading && !hasAutoGenerated) {
      setHasAutoGenerated(true);
      handleGenerateCode(challenge, setCode, setCurrentStep);
    }
  }, [challenge, loading, hasAutoGenerated, handleGenerateCode, setCode, setCurrentStep]);

  useEffect(() => {
    if (isLoadingHints || !activeHint?.content) {
      setIsHintContentVisible(false);
      return;
    }

    setIsHintContentVisible(false);
    const timeoutId = window.setTimeout(() => {
      setIsHintContentVisible(true);
    }, 10);

    return () => {
      window.clearTimeout(timeoutId);
      setIsHintContentVisible(false);
    };
  }, [activeHint?.content, activeHint?.level, isLoadingHints, setIsHintContentVisible]);

  useEffect(() => {
    if (!sortedHintLevels.length) {
      setVisibleHintLevel(null);
      return;
    }

    if (normalizedUnlockedLevel > 0) {
      setVisibleHintLevel((prev) => {
        if (
          prev &&
          prev <= normalizedUnlockedLevel &&
          sortedHintLevels.some((item) => item.level === prev)
        ) {
          return prev;
        }
        return normalizedUnlockedLevel;
      });
    }
  }, [sortedHintLevels, normalizedUnlockedLevel, setVisibleHintLevel]);

  useEffect(() => {
    if (!isHintOpen && prevFocusedElementRef.current) {
      prevFocusedElementRef.current.focus();
      prevFocusedElementRef.current = null;
    }
  }, [isHintOpen]);

  useEffect(() => {
    if (!isHintOpen) {
      return;
    }

    const dialogEl = hintDialogRef.current;
    if (!dialogEl) {
      return;
    }

    if (isFinalHintConfirmVisible) {
      finalHintConfirmButtonRef.current?.focus();
    } else if (hintHeadingRef.current) {
      hintHeadingRef.current.focus();
    }

    const focusableSelectors =
      'a[href], button:not([disabled]), textarea, input, select, [tabindex]:not([tabindex="-1"])';

    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        event.preventDefault();
        closeHint();
        return;
      }

      if (event.key !== 'Tab') {
        return;
      }

      const focusable = Array.from(
        dialogEl.querySelectorAll<HTMLElement>(focusableSelectors)
      ).filter((element) => !element.hasAttribute('disabled'));

      if (!focusable.length) {
        event.preventDefault();
        return;
      }

      const first = focusable[0];
      const last = focusable[focusable.length - 1];
      const current = document.activeElement as HTMLElement | null;

      if (event.shiftKey) {
        if (!current || current === first) {
          event.preventDefault();
          last.focus();
        }
        return;
      }

      if (!current || current === last) {
        event.preventDefault();
        first.focus();
      }
    };

    document.addEventListener('keydown', handleKeyDown);

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isHintOpen, closeHint, normalizedUnlockedLevel, visibleHintLevel, isFinalHintConfirmVisible]);

  useEffect(() => {
    if (typeof document === 'undefined') {
      return undefined;
    }

    if (!isHintOpen) {
      return undefined;
    }

    const { body } = document;
    const previousOverflow = body.style.overflow;
    const previousPaddingRight = body.style.paddingRight;
    const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;

    if (scrollBarWidth > 0) {
      body.style.paddingRight = `${scrollBarWidth}px`;
    }
    body.style.overflow = 'hidden';

    return () => {
      body.style.overflow = previousOverflow;
      body.style.paddingRight = previousPaddingRight;
    };
  }, [isHintOpen]);

  useEffect(() => {
    if (!nextHintLevel) {
      setIsFinalHintConfirmVisible(false);
    }
  }, [nextHintLevel]);

  const handleSubmitSolution = () => {
    const allTestsPassed = testResults.every(
      (result) => result.status === 'success'
    );
    if (allTestsPassed) {
      setCurrentStep(4);
      setShowSuccessModal(true);
    }
  };
  
  const handleShowVideo = (videoSrc: string) => {
    setCurrentVideo(videoSrc);
    setShowVideoModal(true);
  };

  const handleOpenRetire = () => setShowRetireConfirmationModal(true);
  const handleCloseRetire = () => setShowRetireModal(false);
  const handleConfirmRetire = () => {
    setShowRetireConfirmationModal(false);
    setShowRetireModal(true);
  };
  const handleCancelRetire = () => setShowRetireConfirmationModal(false);

  const handleGoHome = () => {
    const confirmed = window.confirm('本当にホーム画面に戻りますか？\n現在の進行状況は保存されません。');
    if (confirmed) {
      navigate('/');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-4 text-purple-700 font-medium">問題を読み込み中...</p>
        </div>
      </div>
    );
  }

  if (!challenge) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-indigo-50 flex flex-col relative overflow-hidden">
      {showSuccessModal && (
        <SuccessModal
          message="おめでとう！バグ修正に成功 🎉"
          explanation={explanation}
          challenge={challenge}
          userAnswer={code}
          lastFailingCode={lastFailingCode}
          aiGeneratedCode={aiGeneratedCode}
          testResults={testResults}
          onClose={() => setShowSuccessModal(false)}
        />
      )}
      
      <HintModal
        isHintOpen={isHintOpen}
        activeHint={activeHint}
        activeHintTitle={activeHintTitle}
        highestHintLevel={highestHintLevel}
        unlockedHintLevels={unlockedHintLevels}
        isLoadingHints={isLoadingHints}
        isFinalHintConfirmVisible={isFinalHintConfirmVisible}
        nextHintLevel={nextHintLevel}
        hintDialogRef={hintDialogRef}
        hintHeadingRef={hintHeadingRef}
        finalHintConfirmButtonRef={finalHintConfirmButtonRef}
        onClose={closeHint}
        onResetHints={handleResetHints}
        onSetVisibleHintLevel={setVisibleHintLevel}
        onRequestAdditionalHint={handleRequestAdditionalHint}
        onConfirmFinalHint={handleConfirmFinalHint}
        onCancelFinalHint={handleCancelFinalHint}
        isHintContentVisible={isHintContentVisible}
      />

      {/* Floating character */}
      <div className="fixed bottom-6 right-6 z-40">
        <button
          type="button"
          onClick={handleHintButtonClick}
          disabled={isLoadingHints}
          aria-expanded={isHintOpen}
          aria-controls="hint-popover"
          aria-label={hintButtonLabel}
          className="group relative w-24 h-24 rounded-full outline-none transition-transform duration-300 focus-visible:ring-2 focus-visible:ring-purple-500 focus-visible:ring-offset-2 focus-visible:ring-offset-transparent disabled:cursor-not-allowed"
        >
          <span className="sr-only">{hintButtonLabel}</span>
          <div className="absolute inset-0 rounded-full bg-gradient-to-br from-pink-400/50 via-purple-400/40 to-indigo-400/20 opacity-0 blur-md transition duration-200 group-hover:opacity-100" />
          <div className="absolute inset-0 rounded-full border-2 border-transparent group-hover:border-pink-300 transition duration-200" />
          <img
            src="/images/character.png"
            alt="プログラミング助手"
            className={`relative z-10 w-full h-full object-contain animate-float group-hover:animate-wiggle group-hover:scale-110 transition-transform duration-300 drop-shadow-lg ${
              isLoadingHints ? 'opacity-60 blur-sm' : ''
            }`}
          />
          {isLoadingHints && (
            <div className="absolute inset-0 z-20 flex flex-col items-center justify-center gap-2 rounded-full bg-slate-900/40">
              <div className="w-10 h-10 border-4 border-pink-400 border-t-transparent rounded-full animate-spin" />
              <span className="text-xs font-semibold text-white drop-shadow">生成中...</span>
            </div>
          )}
          <div className="absolute -top-1 -right-1 z-30">
            <div className="w-4 h-4 bg-gradient-to-r from-yellow-400 to-orange-400 rounded-full animate-sparkle"></div>
          </div>
        </button>
      </div>
      
      {showVideoModal && (
        <VideoModal
          videoSrc={currentVideo}
          onClose={() => setShowVideoModal(false)}
        />
      )}
      {showRetireConfirmationModal && (
        <RetireConfirmationModal
          onConfirm={handleConfirmRetire}
          onCancel={handleCancelRetire}
        />
      )}
      {showRetireModal && (
        <RetireModal
          message="課題の解答と解説"
          explanation={explanation}
          challenge={challenge}
          userAnswer={code}
          lastFailingCode={lastFailingCode}
          aiGeneratedCode={aiGeneratedCode}
          testResults={testResults}
          onClose={handleCloseRetire}
        />
      )}

      <header className="bg-white/80 backdrop-blur-sm border-b border-purple-200 shadow-sm">
        <div className="container mx-auto px-4 py-2 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div 
              className="relative cursor-pointer transform hover:scale-105 transition-transform duration-200"
              onClick={handleGoHome}
            >
              <Bug className="w-8 h-8 text-purple-600" />
              <div className="absolute -top-1 -right-1 w-3 h-3 bg-pink-400 rounded-full animate-ping"></div>
            </div>
            <span 
              className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent cursor-pointer hover:opacity-80 transition-opacity duration-200"
              onClick={handleGoHome}
            >
              DebugMaster
            </span>
            <div className="flex items-center gap-1 ml-2">
              <span className="text-sm font-medium text-purple-600">君ならできる！</span> 
            </div>
          </div>
        </div>
      </header>

      {/* プログレスバー */}
      <div className="bg-white/90 backdrop-blur-sm border-b border-purple-200 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center justify-between mb-3">
            <h1 className="text-2xl font-bold text-purple-800">📋 {challenge.title}</h1>
            <div className="flex items-center gap-2 text-sm text-purple-600">
              <span className="bg-purple-100 px-3 py-1 rounded-full font-bold">⭐ {challenge.difficulty}</span>
            </div>
          </div>
          <div className="flex items-center gap-4 text-sm">
            <div className="flex items-center gap-2">
              <div className={`w-6 h-6 ${currentStep >= 1 ? 'bg-gradient-to-r from-purple-500 to-pink-500' : 'bg-purple-200'} rounded-full flex items-center justify-center text-white font-bold text-xs`}>1</div>
              <span className={`font-medium ${currentStep >= 1 ? 'text-purple-700' : 'text-purple-500'}`}>問題を理解</span>
            </div>
            <div className={`w-8 h-0.5 ${currentStep >= 2 ? 'bg-purple-500' : 'bg-purple-200'}`}></div>
            <div className="flex items-center gap-2">
              <div className={`w-6 h-6 ${currentStep >= 2 ? 'bg-gradient-to-r from-purple-500 to-pink-500' : 'bg-purple-200'} rounded-full flex items-center justify-center text-white font-bold text-xs`}>2</div>
              <span className={`font-medium ${currentStep >= 2 ? 'text-purple-700' : 'text-purple-500'}`}>コード作成</span>
            </div>
            <div className={`w-8 h-0.5 ${currentStep >= 3 ? 'bg-purple-500' : 'bg-purple-200'}`}></div>
            <div className="flex items-center gap-2">
              <div className={`w-6 h-6 ${currentStep >= 3 ? 'bg-gradient-to-r from-purple-500 to-pink-500' : 'bg-purple-200'} rounded-full flex items-center justify-center text-white font-bold text-xs`}>3</div>
              <span className={`font-medium ${currentStep >= 3 ? 'text-purple-700' : 'text-purple-500'}`}>テスト実行</span>
            </div>
            <div className={`w-8 h-0.5 ${currentStep >= 4 ? 'bg-purple-500' : 'bg-purple-200'}`}></div>
            <div className="flex items-center gap-2">
              <div className={`w-6 h-6 ${currentStep >= 4 ? 'bg-gradient-to-r from-purple-500 to-pink-500' : 'bg-purple-200'} rounded-full flex items-center justify-center text-white font-bold text-xs`}>4</div>
              <span className={`font-medium ${currentStep >= 4 ? 'text-purple-700' : 'text-purple-500'}`}>提出</span>
            </div>
          </div>
        </div>
      </div>

      {/* メインコンテンツエリア */}
      <div className="flex-1 flex flex-col">
        {/* 上部：問題エリア */}
        <div className="bg-white/90 backdrop-blur-sm border-b border-purple-200 p-6">
          <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* 問題説明 */}
            <div className="lg:col-span-2">
              <div className="relative bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border-2 border-blue-200 shadow-lg">
                <h2 className="text-xl font-bold text-blue-800 flex items-center gap-2">
                  <BookOpen className="w-6 h-6" />
                  今日のミッション
                </h2>

                <div className="mt-4 text-blue-900 font-medium leading-relaxed">
                  <pre className="font-sans whitespace-pre-wrap">{challenge.instructions}</pre>
                </div>
                
                {/* 例の表示 */}
                <div className="mt-6 bg-white/80 rounded-lg p-4 border border-blue-200">
                  <h3 className="text-lg font-bold text-blue-800 mb-3 flex items-center gap-2">
                    💡 例を見てみよう
                  </h3>
                  <pre className="bg-slate-100 p-3 rounded text-sm font-mono whitespace-pre-wrap text-slate-700">
                    {challenge.examples}
                  </pre>
                </div>

              </div>
            </div>
            
            {/* 右側：動画とヒント */}
            <div className="space-y-4">
              {/* 動画ボタン */}
              {challenge.video && (
                <div className="bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-4 border-2 border-purple-200">
                  <h3 className="text-lg font-bold text-purple-800 mb-3">📺 動画で理解しよう</h3>
                  <button
                    onClick={() => handleShowVideo(challenge.video)}
                    className="w-full flex items-center justify-center gap-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-3 rounded-lg hover:from-purple-600 hover:to-pink-600 transition-all transform hover:scale-105 shadow-lg font-bold"
                  >
                    <PlayCircle className="w-5 h-5" />
                    動画を見る
                  </button>
                </div>
              )}
              
              {/* ヒント活用ガイド */}
              <div className="bg-gradient-to-r from-indigo-50 to-blue-50 rounded-xl p-4 border-2 border-indigo-200">
                <h3 className="text-lg font-bold text-indigo-800 mb-2">🧭 ヒントの使い方</h3>
                <p className="text-indigo-700 text-sm leading-relaxed">
                  右下のキャラクターをクリックするとレベル1〜{displayedHintLevelCount}まで段階的にヒントを確認できます。
                </p>
                <p className="mt-2 text-indigo-600 text-xs leading-relaxed">
                  最終ヒントはほぼ答えなので、表示前に確認ダイアログが出ます。
                </p>
                <p className="mt-2 text-indigo-600 text-xs leading-relaxed">
                  内容が合わないときはリセットボタンからヒントを再生成してみましょう。
                </p>
                {hintError && (
                  <p className="mt-3 rounded-lg border border-pink-200 bg-pink-50 px-3 py-2 text-xs font-semibold text-pink-600">
                    😅 {hintError}
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
        
        {/* コード生成中の表示 */}
        {isGenerating && (
          <div className="bg-white/90 backdrop-blur-sm border-b border-purple-200 p-4">
            <div className="max-w-6xl mx-auto flex items-center justify-center">
              <div className="flex items-center gap-3 bg-green-50 px-6 py-3 rounded-lg border border-green-200">
                <div className="w-4 h-4 border-2 border-green-500 border-t-transparent rounded-full animate-spin" />
                <span className="text-green-700 font-bold">🤖 AIがコード生成中...</span>
              </div>
            </div>
          </div>
        )}
        
        {/* コード生成エラー表示 */}
        {generationError && (
          <div className="bg-white/90 backdrop-blur-sm border-b border-purple-200 p-4">
            <div className="max-w-6xl mx-auto">
              <div className="text-pink-600 font-bold bg-pink-50 px-4 py-2 rounded-lg border border-pink-200 animate-wiggle">
                😅 うまくいかなかったね...もう一度チャレンジしてみよう！
              </div>
            </div>
          </div>
        )}
        
        {/* 下部：コーディングエリア */}
        <div className="flex-1 bg-slate-100">
          <div className="h-full grid grid-cols-1 lg:grid-cols-2 gap-0">
            {/* コードエディタ */}
            <div className="flex flex-col">
              <div className="bg-slate-800 px-4 py-3 flex items-center gap-2 border-b border-slate-700">
                <Code2 className="w-5 h-5 text-slate-400" />
                <span className="text-slate-200 font-bold">💻 コードエディタ</span>
              </div>
              <div className="flex-1 bg-slate-900">
                <CodeMirror
                  value={code}
                  height="100%"
                  extensions={[python(), oneDark, indentUnit.of('    ')]}
                  onChange={(value) => setCode(value)}
                  className="w-full h-full font-mono text-sm"
                />
              </div>
            </div>

            {/* テスト結果 */}
            <div className="bg-white border-l border-slate-300 flex flex-col">
              <div className="bg-slate-800 px-4 py-3 flex items-center justify-between border-b border-slate-700">
                <div className="flex items-center gap-2">
                  <Terminal className="w-5 h-5 text-slate-400" />
                  <span className="text-slate-200 font-bold">🧪 テスト結果</span>
                </div>
                <div className="flex items-center gap-2">
                  <button
                    onClick={() => handleRunCode(code, challenge, setCurrentStep, setLastFailingCode)}
                    disabled={isRunning}
                    className={`flex items-center gap-2 px-4 py-2 rounded font-bold ${
                      isRunning
                        ? 'bg-slate-700 text-slate-400'
                        : 'bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white transform hover:scale-105'
                    } text-sm transition-all`}
                  >
                    {isRunning ? (
                      <>
                        <div className="w-4 h-4 border-2 border-slate-400 border-t-transparent rounded-full animate-spin" />
                        実行中...
                      </>
                    ) : (
                      <>
                        <PlayCircle className="w-4 h-4" />
                        テスト実行
                      </>
                    )}
                  </button>

                  <button
                    onClick={handleOpenRetire}
                    className="flex items-center gap-2 px-4 py-2 rounded font-bold bg-gradient-to-r from-slate-500 to-gray-500 hover:from-slate-600 hover:to-gray-600 text-white text-sm transition-all"
                  >
                    <XCircle className="w-4 h-4" />
                    リタイア
                  </button>
                </div>
              </div>
              <div className="flex-1 p-4 overflow-auto">
                {testResults.map((result, index) => (
                  <div
                    key={index}
                    className={`mb-3 p-3 rounded-lg border-2 ${
                      result.status === 'success' 
                        ? 'bg-green-50 border-green-200' 
                        : 'bg-red-50 border-red-200'
                    }`}
                  >
                    <div className="flex items-start gap-2">
                      {result.status === 'success' ? (
                        <CheckCircle className="w-5 h-5 text-green-500 mt-0.5 flex-shrink-0" />
                      ) : (
                        <XCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
                      )}
                      <div className="flex-1">
                        <div className={`font-bold mb-1 ${
                          result.status === 'success' ? 'text-green-700' : 'text-red-700'
                        }`}>
                          テスト {result.testCase} {result.status === 'success' ? '✅' : '❌'}
                        </div>
                        <div className="text-sm text-slate-600 whitespace-pre-wrap">
                          {result.status === 'forbidden'
                            ? 'APIキーを抜き取ろうとするコードは許可されていません！'
                            : result.message}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                {testResults.length === 0 && (
                  <div className="text-center text-slate-500 py-8">
                    <Terminal className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p className="font-medium">まだテストを実行していません</p>
                    <p className="text-sm">「テスト実行」ボタンを押してみよう！</p>
                  </div>
                )}
              </div>
              
              {/* 提出ボタン */}
              <div className="p-4 border-t border-slate-200">
                {testResults.length > 0 && (
                  <div className="flex items-center justify-center gap-2 text-sm mb-3">
                    <ThumbsUp className="w-4 h-4 text-purple-500" />
                    <span className="font-medium text-purple-700">
                      {getPassingTestsCount()}/{testResults.length} テスト成功
                    </span>
                  </div>
                )}
                <button
                  onClick={handleSubmitSolution}
                  disabled={
                    testResults.length === 0 ||
                    getPassingTestsCount() !== testResults.length
                  }
                  className={`w-full px-6 py-3 rounded-lg flex items-center justify-center gap-2 font-bold ${
                    testResults.length === 0 ||
                    getPassingTestsCount() !== testResults.length
                      ? 'bg-gray-200 text-gray-500'
                      : 'bg-gradient-to-r from-green-500 to-emerald-500 text-white hover:from-green-600 hover:to-emerald-600 transform hover:scale-105 shadow-lg animate-success'
                  } transition-all`}
                >
                  🎉 回答を提出する
                  <ChevronRight className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ChallengeEditor;